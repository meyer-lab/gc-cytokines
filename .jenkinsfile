pipeline {
  agent any
  stages {
    stage('Clean')    { steps { sh 'git clean -ffdx && make clean' } }
    stage('Test/Lint/Doc') {
      parallel {
        stage('Test C++') { steps { sh 'make testcpp' } }
        stage('Test') { steps { sh 'make testcover' } }
        stage('Lint') {
          steps { sh '(pylint3 --rcfile=.pylintrc ckine > pylint.log || echo "pylint3 exited with $?")' }
        }
        stage('Doc') { steps { sh 'make doc' } }
      }
    }
    stage('Build Figures') {
      parallel {
        stage('Build Fig 1') {
          steps { sh 'make ./Manuscript/Figures/figure1.svg' }
        }
        stage('Build Fig 2') {
          steps { sh 'make ./Manuscript/Figures/figure2.svg' }
        }
        stage('Build Fig 3') {
          steps { sh 'make ./Manuscript/Figures/figure3.svg' }
        }
        stage('Build Fig 4') {
          steps { sh 'make ./Manuscript/Figures/figure4.svg' }
        }
      }
    }
    stage('Finish Build') { steps { sh 'make' } }
    stage('Report') {
      steps {
        archiveArtifacts artifacts: 'doxy.log', onlyIfSuccessful: false
        archiveArtifacts artifacts: 'graph_all.svg', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'cprofile.svg', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'Manuscript/Manuscript.pdf', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'Manuscript/Figures/*.pdf', onlyIfSuccessful: true
        publishValgrind([
          pattern: 'valgrind.xml',
          failThresholdInvalidReadWrite: '1',
          failThresholdDefinitelyLost: '100',
          failThresholdTotal: '1000',
          unstableThresholdInvalidReadWrite: '1',
          unstableThresholdDefinitelyLost: '100',
          unstableThresholdTotal: '1000',
          sourceSubstitutionPaths: '',
          publishResultsForAbortedBuilds: false,
          publishResultsForFailedBuilds: true,
          failBuildOnMissingReports: true,
          failBuildOnInvalidReports: true])
        publishHTML([
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: false,
          reportDir: 'Manuscript',
          reportFiles: 'index.html',
          reportName: 'Manuscript',
          reportTitles: ''])
        step([
          $class: 'CoberturaPublisher',
          autoUpdateHealth: true,
          autoUpdateStability: true,
          coberturaReportFile: 'coverage.xml',
          failNoReports: true,
          failUnhealthy: true,
          failUnstable: true,
          sourceEncoding: 'UTF_8',
          zoomCoverageChart: true])
        step([$class:'TasksPublisher', canComputeNew:false, defaultEncoding:'', excludePattern:'',
          healthy:'', high:'TODO,FIXME,XXX', low:'', normal:'CITE', pattern:'**/*.py, **/*.md', unHealthy:''])
        step([$class:'WarningsPublisher', parserConfigurations: [[parserName:'PYLint', pattern:'pylint.log']],
          unstableTotalAll:'75', usePreviousBuildAsReference:true])
        publishHTML([allowMissing:false, alwaysLinkToLastBuild:false, keepAll:true,
          reportDir:'html', reportFiles:'index.html', reportName:'Documentation', reportTitles:''])
      }
    }
  }
  post {
    always {
      junit allowEmptyResults: true, testResults: 'junit.xml'
    }
  }
}
