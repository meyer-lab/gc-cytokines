pipeline {
  agent any
  options {
    timeout(time: 1, unit: 'HOURS')
    parallelsAlwaysFailFast()
  }
  stages {
    stage('Clean') { steps { sh 'git clean -ffdx && make clean' } }
    stage('Venv') { steps { sh 'make venv && make ckine/ckine.so' } }
    stage('Run') {
      parallel {
        stage('Test C++') {
          steps {
            sh 'make testcpp'
            archiveArtifacts artifacts: 'cprofile.svg, testResults.xml', onlyIfSuccessful: false
          }
        }
        stage('Test') {
          steps {
            sh 'make testcover'
            junit allowEmptyResults: true, testResults: 'junit.xml'
            cobertura coberturaReportFile: 'coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
          }
        }
        /* stage('Doc') { // Aren't really using docs at the moment.
          steps {
            sh 'make doc'
            archiveArtifacts artifacts: 'doxy.log', onlyIfSuccessful: false
            publishHTML([allowMissing:false, alwaysLinkToLastBuild:false, keepAll:true, reportDir:'html', reportFiles:'index.html', reportName:'Docs'])
          }
        } */
        stage('Build') {
          steps {
            sh 'make -j 6'
            archiveArtifacts artifacts: 'Manuscript/Figures/*.pdf, Manuscript/Manuscript.pdf', onlyIfSuccessful: true
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'Manuscript', reportFiles: 'index.html', reportName: 'Manuscript', reportTitles: ''])
            recordIssues qualityGates: [[threshold: 1, type: 'TOTAL_HIGH', unstable: true], [threshold: 20, type: 'TOTAL_NORMAL', unstable: true], [threshold: 40, type: 'TOTAL_LOW', unstable: true]], tools: [pyLint(pattern: 'pylint.log')]
          }
        }
      }
    }
  }
}
